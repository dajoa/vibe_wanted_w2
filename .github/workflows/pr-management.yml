name: PR Management

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]

jobs:
  pr-comment:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
    - name: PR 체크리스트 댓글 추가
      uses: actions/github-script@v7
      with:
        script: |
          const body = `
          ## PR 체크리스트 ✅
          
          PR 작성자는 다음 항목들을 확인해주세요:
          
          ### 코드 품질
          - [ ] SOLID 원칙을 준수했습니다
          - [ ] Clean Architecture를 적용했습니다
          - [ ] 함수와 클래스가 적절한 크기입니다
          
          ### 테스트
          - [ ] 새로운 기능에 대한 테스트 코드를 작성했습니다
          - [ ] 모든 테스트가 통과합니다
          - [ ] TDD 프로세스를 따랐습니다
          
          ### 문서화
          - [ ] 필요한 경우 README를 업데이트했습니다
          - [ ] API 변경사항을 문서화했습니다
          - [ ] 코드에 적절한 주석을 추가했습니다
          
          ### 기타
          - [ ] 관련 이슈를 링크했습니다
          - [ ] 스크린샷을 첨부했습니다 (UI 변경 시)
          - [ ] 브랜치명이 규칙에 맞습니다
          
          ---
          *이 댓글은 자동으로 생성되었습니다.*
          `;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  pr-assigner:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
    - name: PR 생성자에게 자동 할당
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.addAssignees({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            assignees: [context.payload.pull_request.user.login]
          });

  pr-labeler:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 파일 변경사항 기반 라벨링
      uses: actions/github-script@v7
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const labels = new Set();
          
          // 파일 경로 기반 라벨링
          for (const file of files) {
            if (file.filename.startsWith('backend/')) {
              labels.add('backend');
            }
            if (file.filename.startsWith('frontend/')) {
              labels.add('frontend');
            }
            if (file.filename.startsWith('docs/') || file.filename.endsWith('.md')) {
              labels.add('documentation');
            }
            if (file.filename.includes('test')) {
              labels.add('tests');
            }
            if (file.filename.endsWith('.yml') || file.filename.endsWith('.yaml')) {
              labels.add('ci/cd');
            }
          }
          
          // PR 제목 기반 라벨링
          const title = context.payload.pull_request.title.toLowerCase();
          if (title.includes('bug') || title.includes('fix')) {
            labels.add('bug');
          }
          if (title.includes('feature') || title.includes('feat')) {
            labels.add('enhancement');
          }
          if (title.includes('docs')) {
            labels.add('documentation');
          }
          if (title.includes('refactor')) {
            labels.add('refactoring');
          }
          
          // 크기 기반 라벨링
          const changedLines = files.reduce((sum, file) => sum + file.changes, 0);
          if (changedLines < 50) {
            labels.add('size/S');
          } else if (changedLines < 200) {
            labels.add('size/M');
          } else if (changedLines < 500) {
            labels.add('size/L');
          } else {
            labels.add('size/XL');
          }
          
          if (labels.size > 0) {
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: Array.from(labels)
            });
          }

  auto-review:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 자동 코드 리뷰 댓글
      uses: actions/github-script@v7
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          let reviewComments = [];
          
          for (const file of files) {
            // Python 파일 체크
            if (file.filename.endsWith('.py')) {
              // 파일 크기 체크
              if (file.changes > 300) {
                reviewComments.push(`⚠️ **${file.filename}**: 이 파일의 변경사항이 큽니다 (${file.changes} lines). 더 작은 단위로 분리하는 것을 고려해보세요.`);
              }
              
              // 테스트 파일 체크
              if (!file.filename.includes('test') && file.status === 'added') {
                reviewComments.push(`🧪 **${file.filename}**: 새로운 파일에 대한 테스트 코드를 작성했는지 확인해주세요.`);
              }
            }
          }
          
          if (reviewComments.length > 0) {
            const body = `
            ## 자동 코드 리뷰 🤖
            
            ${reviewComments.join('\n\n')}
            
            ---
            *이 리뷰는 자동으로 생성되었습니다. 참고용으로만 사용해주세요.*
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          } 