---
description: 
globs: 
alwaysApply: false
---
# 스켈레톤 코드 개발 계획 (Skeleton Development Plan)

## 개발 계획

### Phase 1: 프로젝트 기반 설정
1. 프로젝트 폴더 구조 생성
2. Python 가상환경 설정
3. 환경변수 파일 생성 (.env)
4. 의존성 파일 작성 (requirements.txt)

### Phase 2: 백엔드 API 스켈레톤 구현
5. FastAPI 기본 서버 구조 구현
6. 기본 API 엔드포인트 스켈레톤 생성
   - GET `/` (기본 응답)
   - GET `/health` (상태 확인)  
   - POST `/search` (검색 요청)
7. 더미 데이터로 API 응답 구현

### Phase 3: LangGraph Agent 더미 구조 구현
8. React Agent 기본 구조 생성
9. 더미 검색 도구 구현
10. 더미 LLM 응답 생성기 구현
11. 더미 상품 검색 결과 생성

### Phase 4: Streamlit 프론트엔드 스켈레톤 구현
12. 기본 챗봇 인터페이스 구현
13. 더미 채팅 데이터로 메시지 표시 구현
14. 사용자 입력 처리 구현
15. 백엔드 API 연동 인터페이스 구현

### Phase 5: 통합 테스트 및 더미 데이터 연동
16. 프론트엔드-백엔드 연동 테스트
17. 더미 데이터로 전체 플로우 동작 확인
18. 에러 처리 및 예외 상황 처리 구현

## 기술 스택 참고사항 (Context7 기반)

### LangGraph
- **create_react_agent** 사용하여 React Agent 구현
- **더미 도구**: 검색 결과를 시뮬레이션하는 가짜 도구 구현
- **InMemorySaver** 사용하여 세션 관리 (메모리 기반)
- **더미 LLM**: 실제 LLM 대신 사전 정의된 응답 반환

### FastAPI
- **기본 앱 구조**: `FastAPI()` 인스턴스로 앱 생성
- **경로 작업**: `@app.get()`, `@app.post()` 데코레이터 사용
- **응답 모델**: Pydantic BaseModel로 더미 응답 구조 정의
- **비동기 처리**: `async def` 함수로 엔드포인트 구현

### Streamlit  
- **chat_message**: 채팅 메시지 표시용 컨테이너
- **chat_input**: 사용자 입력 받는 위젯
- **session_state**: 채팅 히스토리 및 상태 관리
- **더미 스트리밍**: 실제 응답 대신 시뮬레이션된 스트리밍 구현

## 더미 데이터 전략

### 더미 상품 검색 결과
- 3-5개의 가상 상품 정보
- 가격, 쇼핑몰명, 할인 정보 포함
- JSON 형태의 구조화된 데이터

### 더미 LLM 응답
- 사전 정의된 템플릿 기반 응답
- 상품명에 따른 조건부 응답
- 검색 실패 시 대체 응답

### 더미 검색 도구
- 키워드 기반 더미 검색 결과 반환
- 랜덤 지연 시간으로 실제 검색 시뮬레이션
- 검색 진행 상황 더미 로그 생성

## 개발 순서별 핵심 기능

1. **폴더 구조**: backend/, frontend/, docs/ 디렉토리
2. **환경 설정**: Python 가상환경, 환경변수 템플릿
3. **FastAPI 서버**: 기본 라우팅과 더미 응답
4. **Agent 스켈레톤**: 더미 도구와 가짜 LLM 연동
5. **Streamlit UI**: 채팅 인터페이스와 상태 관리
6. **API 연동**: HTTP 클라이언트로 백엔드 호출
7. **통합 테스트**: 전체 플로우 동작 검증
