---
description: 
globs: 
alwaysApply: false
---
# TASK-001: 프로젝트 구조 및 환경 설정 개발 계획

## 구현 항목

### 1. 프로젝트 폴더 구조 생성
- backend 폴더 구조 설정
- frontend 폴더 구조 설정  

### 3. 의존성 관리 파일 작성
- requirements.txt 파일 생성
- 백엔드 의존성 정의
- 프론트엔드 의존성 정의
- 개발 의존성 정의

### 4. 환경 변수 설정
- .env 파일 템플릿 생성
- .env.example 파일 작성
- 환경 변수 로드 검증

### 5. 프로젝트 설정 파일 구성
- .gitignore 파일 작성
- README.md 기본 구조 생성
- 프로젝트 메타데이터 파일 설정

## 기술 스택 및 라이브러리

### Python 환경
- **Python**: 3.11 버전 기반
- **가상환경**: venv 또는 virtualenv 사용
- **패키지 관리**: pip 기반 의존성 관리

### 백엔드 의존성
- **FastAPI**: ASGI 웹 프레임워크
- **uvicorn**: ASGI 서버 (표준 버전 포함)
- **LangGraph**: Agent 프레임워크
- **LangChain**: DuckDuckGo Search Tool
- **python-dotenv**: 환경 변수 로드

### 프론트엔드 의존성  
- **Streamlit**: 웹 인터페이스 프레임워크
- **requests**: HTTP 클라이언트
- **streamlit-chat**: 챗봇 UI 컴포넌트

### 개발 및 테스트 도구
- **pytest**: 테스트 프레임워크
- **httpx**: 비동기 HTTP 클라이언트 (테스트용)
- **black**: 코드 포맷터
- **flake8**: 코드 린터

### 환경 변수
- **OPENAI_API_KEY**: LLM API 키 (Gemini 대체 가능)
- **LANGSMITH_API_KEY**: LangSmith 모니터링
- **FASTAPI_HOST**: API 서버 호스트
- **FASTAPI_PORT**: API 서버 포트
- **STREAMLIT_PORT**: 프론트엔드 포트

## 개발 계획

### Phase 1: 기본 폴더 구조 생성
1. 루트 디렉토리 생성 및 초기화
2. backend 폴더 및 하위 구조 생성
3. frontend 폴더 생성
4. docs 폴더 및 문서 파일 생성
5. .cursor/rules 폴더 구성

### Phase 2: Python 환경 설정
6. Python 가상환경 생성
7. 가상환경 활성화 확인
8. Python 인터프리터 경로 설정
9. pip 업그레이드 및 기본 도구 설치

### Phase 3: 의존성 파일 작성
10. backend/requirements.txt 작성
11. frontend/requirements.txt 작성 (선택적)
12. 개발용 requirements-dev.txt 작성
13. 의존성 설치 테스트

### Phase 4: 환경 변수 및 설정 파일
14. .env.example 템플릿 파일 작성
15. .gitignore 파일 생성
16. README.md 기본 구조 작성
17. 환경 변수 로드 테스트 스크립트 작성

### Phase 5: 프로젝트 검증 및 문서화
18. 폴더 구조 검증 스크립트 실행
19. 의존성 설치 검증
20. 환경 변수 로드 테스트
21. 프로젝트 설정 문서 업데이트

## 폴더 구조 설계 (Context7 참고)

### 루트 구조
```
project-root/
├── backend/
│   ├── app/
│   │   ├── __init__.py
│   │   ├── main.py
│   │   ├── api/
│   │   ├── services/
│   │   └── agents/
│   ├── requirements.txt
│   └── tests/
├── frontend/
│   ├── app.py
│   ├── requirements.txt
│   └── components/
├── docs/
├── .cursor/rules/
├── .env.example
├── .gitignore
└── README.md
```

### Uvicorn 기반 설정
- **ASGI 서버**: uvicorn[standard] 사용
- **설정 방식**: 프로그래매틱 방식과 CLI 방식 지원
- **개발 모드**: --reload 옵션으로 자동 재시작
- **운영 환경**: 멀티 워커 프로세스 지원

### 환경 구성 전략
- **로컬 개발**: .env 파일 기반 설정
- **의존성 격리**: 가상환경 사용
- **설정 분리**: 개발/운영 환경 구분
- **보안 관리**: API 키 및 민감 정보 분리
